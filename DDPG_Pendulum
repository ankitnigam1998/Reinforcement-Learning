{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "tAvxb-56uuve"
      },
      "outputs": [],
      "source": [
        "import gym\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "from collections import deque\n",
        "import random\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "BUFFER_SIZE = 100000\n",
        "BATCH_SIZE = 64\n",
        "GAMMA = 0.99\n",
        "TAU = 0.001\n",
        "LR_ACTOR = 0.0001\n",
        "LR_CRITIC = 0.001\n",
        "NUM_EPISODES = 1000\n",
        "MAX_STEPS = 200"
      ],
      "metadata": {
        "id": "_phFlYSuuvzW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "04544283-ebd5-4408-d26a-1103c5b2c894"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class ReplayBuffer:\n",
        "    def __init__(self, buffer_size):\n",
        "        self.buffer = deque(maxlen=buffer_size)\n",
        "    \n",
        "    def add(self, state, action, reward, next_state, done):\n",
        "        self.buffer.append((state, action, reward, next_state, done))\n",
        "    \n",
        "    def sample(self, batch_size):\n",
        "        states, actions, rewards, next_states, dones = zip(*random.sample(self.buffer, batch_size))\n",
        "        return np.array(states), np.array(actions), np.array(rewards, dtype=np.float32), np.array(next_states), np.array(dones, dtype=np.uint8)\n",
        "    \n",
        "    def __len__(self):\n",
        "        return len(self.buffer)\n"
      ],
      "metadata": {
        "id": "rP4C3H7Luybn"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class ActorNetwork(tf.keras.Model):\n",
        "    def __init__(self, state_dim, action_dim, action_bound):\n",
        "        super(ActorNetwork, self).__init__()\n",
        "        self.fc1 = tf.keras.layers.Dense(400, activation='relu')\n",
        "        self.fc2 = tf.keras.layers.Dense(300, activation='relu')\n",
        "        self.fc3 = tf.keras.layers.Dense(action_dim, activation='tanh')\n",
        "        self.action_bound = action_bound\n",
        "    \n",
        "    def call(self, state):\n",
        "        x = self.fc1(state)\n",
        "        x = self.fc2(x)\n",
        "        x = self.fc3(x)\n",
        "        action = x * self.action_bound\n",
        "        return action\n",
        "\n",
        "\n",
        "class CriticNetwork(tf.keras.Model):\n",
        "    def __init__(self, state_dim, action_dim):\n",
        "        super(CriticNetwork, self).__init__()\n",
        "        self.fc1 = tf.keras.layers.Dense(400, activation='relu')\n",
        "        self.fc2 = tf.keras.layers.Dense(300, activation='relu')\n",
        "        self.fc3 = tf.keras.layers.Dense(1, activation=None)\n",
        "    \n",
        "    def call(self, state, action):\n",
        "        x = tf.concat([state, action], axis=-1)\n",
        "        x = self.fc1(x)\n",
        "        x = self.fc2(x)\n",
        "        q_value = self.fc3(x)\n",
        "        return q_value\n"
      ],
      "metadata": {
        "id": "SpnASvZAu-kH"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class DDPGAgent:\n",
        "    def __init__(self, state_dim, action_dim, action_bound):\n",
        "        self.state_dim = state_dim\n",
        "        self.action_dim = action_dim\n",
        "        self.action_bound = action_bound\n",
        "        \n",
        "        self.actor = ActorNetwork(state_dim, action_dim, action_bound)\n",
        "        self.critic = CriticNetwork(state_dim, action_dim)\n",
        "        \n",
        "        self.target_actor = ActorNetwork(state_dim, action_dim, action_bound)\n",
        "        self.target_critic = CriticNetwork(state_dim, action_dim)\n",
        "        \n",
        "        self.replay_buffer = ReplayBuffer(BUFFER_SIZE)\n",
        "        \n",
        "        self.actor_optimizer = tf.keras.optimizers.Adam(LR_ACTOR)\n",
        "        self.critic_optimizer = tf.keras.optimizers.Adam(LR_CRITIC)\n",
        "        \n",
        "        self.total_steps = 0\n",
        "        \n",
        "        self.update_target_networks(tau=1.0)\n",
        "        \n",
        "    def get_action(self, state):\n",
        "        state = np.expand_dims(state, axis=0)\n",
        "        action = self.actor(state)[0]\n",
        "        return action.numpy()\n",
        "    \n",
        "    def update_target_networks(self, tau=None):\n",
        "        if tau is None:\n",
        "            tau = TAU\n",
        "        \n",
        "        weights = []\n",
        "        targets = []\n",
        "        for net, target_net in zip([self.actor, self.critic], [self.target_actor, self.target_critic]):\n",
        "            for w, target_w in zip(net.weights, target_net.weights):\n",
        "                weights.append(w)\n",
        "                targets.append(target_w)\n",
        "                target_w.assign(tau * w + (1 - tau) * target_w)\n",
        "        \n",
        "        self.target_actor.set_weights(targets[:len(weights)//2])\n",
        "        self.target_critic.set_weights(targets[len(weights)//2:])\n",
        "        \n",
        "    def train(self, batch_size=BATCH_SIZE):\n",
        "        if len(self.replay_buffer) < batch_size:\n",
        "            return\n",
        "        \n",
        "        states, actions, rewards, next_states, dones = self.replay_buffer.sample(batch_size)\n",
        "        \n",
        "        with tf.GradientTape() as tape:\n",
        "            # Compute actor loss\n",
        "            actions_pred = self.actor(states)\n",
        "            actor_loss = -tf.math.reduce_mean(self.critic(states, actions_pred))\n",
        "            \n",
        "        actor_grads = tape.gradient(actor_loss, self.actor.trainable_weights)\n",
        "        self.actor_optimizer.apply_gradients(zip(actor_grads, self.actor.trainable_weights))\n",
        "        \n",
        "        with tf.GradientTape() as tape:\n",
        "            # Compute critic loss\n",
        "            next_actions = self.target_actor(next_states)\n",
        "            target_q = rewards + GAMMA * self.target_critic(next_states, next_actions) * (1 - dones)\n",
        "            q_values = self.critic(states, actions)\n",
        "            critic_loss = tf.math.reduce_mean(tf.math.square(target_q - q_values))\n",
        "            \n",
        "        critic_grads = tape.gradient(critic_loss, self.critic.trainable_weights)\n",
        "        self.critic_optimizer.apply_gradients(zip(critic_grads, self.critic.trainable_weights))\n",
        "        \n",
        "        self.update_target_networks()\n",
        "        \n",
        "        self.total_steps += 1\n"
      ],
      "metadata": {
        "id": "zkJu4vukvGvR"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "env = gym.make('Pendulum-v1')\n",
        "state_dim = env.observation_space.shape[0]\n",
        "action_dim = env.action_space.shape[0]\n",
        "action_bound = env.action_space.high[0]\n",
        "\n",
        "agent = DDPGAgent(state_dim, action_dim, action_bound)\n",
        "\n",
        "episode_rewards = []\n",
        "for episode in range(NUM_EPISODES):\n",
        "    state = env.reset()\n",
        "    episode_reward = 0\n",
        "    \n",
        "    for step in range(MAX_STEPS):\n",
        "        action = agent.get_action(state)\n",
        "        next_state, reward, done, _ = env.step(action)\n",
        "        episode_reward += reward\n",
        "        \n",
        "        agent.replay_buffer.add(state, action, reward, next_state, done)\n",
        "        agent.train()\n",
        "        \n",
        "        state = next_state\n",
        "        \n",
        "        if done:\n",
        "            break\n",
        "    \n",
        "    episode_rewards.append(episode_reward)\n",
        "    \n",
        "    print(f'Episode {episode+1} | Reward: {episode_reward:.2f}')\n",
        "    \n",
        "env.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QaVvmna0vRLI",
        "outputId": "d84fe7d3-f715-4adb-a98a-2e4692601976"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/gym/core.py:317: DeprecationWarning: \u001b[33mWARN: Initializing wrapper in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.\u001b[0m\n",
            "  deprecation(\n",
            "/usr/local/lib/python3.9/dist-packages/gym/wrappers/step_api_compatibility.py:39: DeprecationWarning: \u001b[33mWARN: Initializing environment in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.\u001b[0m\n",
            "  deprecation(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Episode 1 | Reward: -1070.29\n",
            "Episode 2 | Reward: -1603.62\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(episode_rewards)\n",
        "plt.xlabel(\"Episode\")\n",
        "plt.ylabel(\"Reward\")\n",
        "plt.title(\"Reward per Episode\")\n",
        "plt.show()\n",
        "plt.savefig('DDPG_Pendulum_Rewards.png')"
      ],
      "metadata": {
        "id": "fCaXw0QnvZIU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "outputId": "aa09cb39-36da-416e-8243-cc9004730e7f"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}